{
    function last(arr) {
        return arr[arr.length - 1];
    }
    function concat(arr, arr2) {
        return arr.concat(arr2);
    }
}

start =  Cross

CrossBreak
  = ';' {
    // return break positions, for UI
    return location().start.offset;
  }

Cross
  = left: Expression tail:(_ CrossBreak _ Cross)* {
    var rest = tail[0]; // there's only ever one
    var crossbreak = 1, cross = 3; // parser objects
    var exps = 1, pos = 2; // cross variant args: ['cross', exps, pos]
    return rest ? ['cross', concat([left], rest[cross][exps]), concat([rest[crossbreak]], rest[cross][pos])] : ['cross', [left], []];
  }

Expression
  = left:Term tail:(_ 'OR' _ Term)* {
      return tail.length ? concat(['or', left], tail.map(last)) : left;
   }

Term
  = left:Factor tail:(_ ('AND' _)? Factor)* {
      return tail.length ? concat(['and', left], tail.map(last)) : left;
   }

Factor
 = Grouping / Field / Value / Not

Not
  = 'NOT' _ factor:Factor { return ['ne', factor]; }
 
Grouping
  = '(' exp:Expression ')' { return ['group', exp]; }
 
 
Field
 = left:FieldName ":" _ right: Value {
      return ['field', left, right];
      }

Value = NeValue / LeValue / GeValue / LtValue / GtValue / EqValue / QuotedValue / PlainValue
PlainValue = ! 'OR' ! 'NOT' [^ \t();]+ { return ['value', text()]; }
QuotedValue = '"' [^"]* '"' {
   var val = text();
   return ['quoted-value', val.slice(1, val.length - 1)];
   }
EqValue = '=' value:(QuotedValue / PlainValue) { return value; }
NeValue = '!=' value:(QuotedValue / PlainValue) { return ['ne', value]; }
GtValue = '>' value:PlainValue { return ['gt', value[1]]; }
LtValue = '<' value:PlainValue { return ['lt', value[1]]; }
GeValue = '>=' value:PlainValue { return ['ge', value[1]]; }
LeValue = '<=' value:PlainValue { return ['le', value[1]]; }

FieldName
  = ! 'OR' ! 'NOT' [a-zA-Z][^ \t:=]* { return text(); }

_ "whitespace"
  = [ \t\n\r]* {return text(); }
