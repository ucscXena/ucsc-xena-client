# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.8
jobs:
  build:
    working_directory: ~/ucscXena/ucsc-xena-client
    parallelism: 1
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
    # In CircleCI 1.0 we used a pre-configured image with a large number of languages and other packages.
    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.
    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.
    # We have selected a pre-built image that mirrors the build environment we use on
    # the 1.0 platform, but we recommend you choose an image more tailored to the needs
    # of each job. For more information on choosing an image (or alternatively using a
    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/
    # To see the list of pre-built images that CircleCI provides for most common languages see
    # https://circleci.com/docs/2.0/circleci-images/
    docker:
    - image: cimg/node:18.20.8-browsers
    steps:
    # Machine Setup
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # The following `checkout` command checks out your code to your working directory. In 1.0 we did this implicitly. In 2.0 you can choose where in the course of a job your code should be checked out.
    - run: sudo apt update
    - run: sudo apt-get install libssl-dev python3.10-venv
    - browser-tools/install-chrome  # Installs Google Chrome
    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    # In many cases you can simplify this from what is generated here.
    # 'See docs on artifact collection here https://circleci.com/docs/2.0/artifacts/'
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    # This is based on your 1.0 configuration file or project settings
    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
    - restore_cache:
        keys:
        # This branch if available
        - v2-dep-{{ .Branch }}-
        # Default branch if not
        - v2-dep-master-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v2-dep-
    # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    - run: if [ -z "${NODE_ENV:-}" ]; then export NODE_ENV=test; fi
    - run: export PATH="~/ucscXena/ucsc-xena-client/node_modules/.bin:$PATH"
    - run: node --version
    - run: npm --version
    - run: npm install
    # You can remove the conditional and simply install the requirements file you use
    - run:
        command: |
          python -m venv env
          . env/bin/activate
          pip install -r requirements.txt
          pip install unittest-xml-reporting
    # Save dependency cache
    - save_cache:
        key: v2-dep-{{ .Branch }}-{{ epoch }}
        paths:
        # This is a broad list of cache paths to include many possible development environments
        # You can probably delete some of these entries
        - ./env
        - ./node_modules
    - persist_to_workspace:
        root: ~/ucscXena/ucsc-xena-client
        paths:
          - node_modules
    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # This is based on your 1.0 configuration file or project settings
    - run: npm run lint -- -f junit -o $CIRCLE_TEST_REPORTS/lint-results.xml
    - run: npm run test:headless -- -f $CIRCLE_TEST_REPORTS/test-results.xml
    # Deployment
    # Your existing circle.yml file contains deployment steps.
    # The config translation tool does not support translating deployment steps
    # since deployment in CircleCI 2.0 are better handled through workflows.
    # See the documentation for more information https://circleci.com/docs/2.0/workflows/
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
  deploy-dev:
    working_directory: ~/ucscXena/ucsc-xena-client
    docker:
    - image: cimg/node:18.20.8-browsers
    shell: /bin/bash --login
    steps:
    - add_ssh_keys:
        fingerprints:
          - "07:16:e6:26:26:57:ff:7b:3e:79:cf:e6:55:57:8b:1d"
    - run: sudo apt update
    - run: sudo apt-get install rsync
    - checkout
    - attach_workspace:
        at: ~/ucscXena/ucsc-xena-client
    - run: HOST=ec2-18-233-160-225.compute-1.amazonaws.com ./deploy
  deploy-cc:
    working_directory: ~/ucscXena/ucsc-xena-client
    docker:
    - image: cimg/node:18.20.8-browsers
    shell: /bin/bash --login
    steps:
    - add_ssh_keys:
        fingerprints:
          - "07:16:e6:26:26:57:ff:7b:3e:79:cf:e6:55:57:8b:1d"
    - run: sudo apt update
    - run: sudo apt-get install rsync
    - checkout
    - attach_workspace:
        at: ~/ucscXena/ucsc-xena-client
    - run: HOST=ec2-3-95-182-133.compute-1.amazonaws.com ./deploy
  deploy-beta:
    working_directory: ~/ucscXena/ucsc-xena-client
    docker:
    - image: cimg/node:18.20.8-browsers
    shell: /bin/bash --login
    steps:
    - add_ssh_keys:
        fingerprints:
          - "07:16:e6:26:26:57:ff:7b:3e:79:cf:e6:55:57:8b:1d"
    - run: sudo apt update
    - run: sudo apt-get install rsync
    - checkout
    - attach_workspace:
        at: ~/ucscXena/ucsc-xena-client
    - run: HOST=ec2-54-92-223-47.compute-1.amazonaws.com ./deploy
workflows:
    version: 2
    build-n-deploy:
      jobs:
        - build:
            filters:
              tags:
                only: /v[0-9]+(\.[0-9]+)*/
        - deploy-dev:
            requires:
              - build
            filters:
              branches:
                only: master
        - deploy-cc:
            requires:
              - build
            filters:
              branches:
                only: mui-dev
        - deploy-beta:
            requires:
              - build
            filters:
              tags:
                only: /v[0-9]+(\.[0-9]+)*/
              branches:
                ignore: /.*/
